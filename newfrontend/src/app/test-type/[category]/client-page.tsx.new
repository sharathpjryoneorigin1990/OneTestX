'use client';

import { motion } from 'framer-motion';
import Link from 'next/link';
import { NewNavbar } from "@/components/layout/NewNavbar";
import { useSearchParams } from 'next/navigation';
import React, { useEffect, useState } from 'react';
import GitHubConnectionModal from '@/components/github/GitHubConnectionModal';

interface SubTestType {
  title: string;
  description: string;
  icon: string;
  color: string;
  isSpecial: boolean;
  href?: string;
}

const subTestTypes: Record<string, SubTestType[]> = {
  // ... (keep existing subTestTypes object)
};

// Client component that doesn't need to deal with params Promise
export default function ClientSubTestTypePage({ category }: { category: string }) {
  const [isClient, setIsClient] = useState(false);
  const [currentCategory, setCurrentCategory] = useState<keyof typeof subTestTypes>('ui');
  const searchParams = useSearchParams();
  const [loading, setLoading] = useState(false);
  const [tests, setTests] = useState<any[]>([]);
  const [filteredTests, setFilteredTests] = useState<any[]>([]);
  const [isGitHubModalOpen, setIsGitHubModalOpen] = useState(false);
  
  useEffect(() => {
    setIsClient(true);
    
    // Only set if it's a valid category
    if (category && category in subTestTypes) {
      setCurrentCategory(category as keyof typeof subTestTypes);
    }
  }, [category]);

  // Get any additional search params
  const type = searchParams?.get('type');

  if (!isClient) {
    return null;
  }

  return (
    <>
      <NewNavbar />
      <main className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white">
        <div className="container mx-auto px-4 py-12">
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="mb-12"
          >
            <div className="flex justify-between items-start">
              <div>
                <h1 className="text-4xl font-bold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-blue-600">
                  {currentCategory.charAt(0).toUpperCase() + currentCategory.slice(1)} Tests
                </h1>
                <p className="text-xl text-gray-300">
                  Select a test type to configure and run
                </p>
              </div>
              <button 
                className="p-2 rounded-full hover:bg-gray-800 transition-colors"
                onClick={() => setIsGitHubModalOpen(true)}
                aria-label="GitHub Settings"
              >
                <svg 
                  xmlns="http://www.w3.org/2000/svg" 
                  className="h-6 w-6 text-gray-400 hover:text-white" 
                  fill="none" 
                  viewBox="0 0 24 24" 
                  stroke="currentColor"
                >
                  <path 
                    strokeLinecap="round" 
                    strokeLinejoin="round" 
                    strokeWidth={2} 
                    d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" 
                  />
                  <path 
                    strokeLinecap="round" 
                    strokeLinejoin="round" 
                    strokeWidth={2} 
                    d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" 
                  />
                </svg>
              </button>
            </div>
          </motion.div>

          <GitHubConnectionModal
            isOpen={isGitHubModalOpen}
            onClose={() => setIsGitHubModalOpen(false)}
            onConnect={(data: { username: string; token: string; repo: string }) => {
              console.log('GitHub connection data:', data);
              // Here you would typically make an API call to connect to GitHub
              // For now, we'll just log the data and close the modal
              setIsGitHubModalOpen(false);
              // Show success message
              alert('Successfully connected to GitHub!');
            }}
          />

          {/* Rest of the component */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12">
            {subTestTypes[currentCategory]?.map((test, index) => (
              <Link 
                key={index}
                href={test.href || `/test-files?category=${currentCategory}&type=${test.title.toLowerCase().replace(/\s+/g, '-')}`}
                className={`group relative overflow-hidden rounded-xl p-6 transition-all duration-300 hover:scale-105 hover:shadow-2xl ${test.color} ${test.isSpecial ? 'bg-gradient-to-r from-blue-500 to-purple-600' : ''}`}
              >
                <div className="absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                <div className="relative z-10">
                  <div className="text-4xl mb-4">{test.icon}</div>
                  <h3 className="text-xl font-bold mb-2">{test.title}</h3>
                  <p className="text-sm text-white/80">{test.description}</p>
                </div>
              </Link>
            ))}
          </div>
        </div>
      </main>
    </>
  );
}
