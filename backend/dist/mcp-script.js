// MCP Script for Browser Automation
// This script will be injected into the browser page by Playwright
// It listens for commands via window.postMessage and executes them
export var MCP_SCRIPT = "(() => {\n  interface MessageEvent extends Event {\n    origin: string;\n    source: Window;\n    data: {\n      type: 'command' | 'response' | 'error';\n      id?: string;\n      command?: Command;\n      result?: any;\n      error?: string;\n    };\n  }\n\n  interface Command {\n    action: 'type' | 'click';\n    selectors: string[];\n    text?: string;\n    id?: string;\n  }\n\n  interface ElementWithFocus extends Element {\n    focus?: () => void;\n    value?: string;\n  }\n\n  interface ElementWithClick extends Element {\n    click?: () => void;\n  }\n\n  console.log('MCP SCRIPT: Initializing...');\n  \n  // Store the origin that is allowed to send commands\n  const ALLOWED_ORIGIN = 'http://localhost:3000';\n  \n  // Listen for commands from the parent window\n  window.addEventListener('message', (event: MessageEvent) => {\n    try {\n      // Validate origin\n      if (event.origin !== ALLOWED_ORIGIN) {\n        console.warn('MCP SCRIPT: Command from unauthorized origin:', event.origin);\n        return;\n      }\n      \n      const command = event.data?.command as Command;\n      \n      if (event.data?.type === 'command' && command) {\n        console.log('MCP SCRIPT: Received command:', JSON.stringify(command));\n        \n        // Execute the command\n        const result = executeCommand(command);\n        \n        // Send response back\n        event.source?.postMessage({\n          type: 'response',\n          id: command.id,\n          result\n        }, event.origin);\n      }\n    } catch (error) {\n      console.error('MCP SCRIPT: Error processing command:', error);\n      event.source?.postMessage({\n        type: 'error',\n        id: command?.id,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }, event.origin);\n    }\n  });\n  \n  // Execute a command\n  function executeCommand(command: Command): Promise<any> {\n    return new Promise((resolve, reject) => {\n      try {\n        const { action, selectors, text } = command;\n        \n        switch (action) {\n          case 'type':\n            if (!selectors || !text) {\n              reject(new Error('Missing required parameters for type action'));\n              return;\n            }\n            \n            const element = findElement(selectors);\n            if (!element) {\n              reject(new Error('Element not found'));\n              return;\n            }\n            \n            if (element && 'focus' in element) {\n              element.focus();\n            }\n            if (element && 'value' in element) {\n              element.value = text;\n            }\n            resolve({ success: true });\n            \n          case 'click':\n            if (!selectors) {\n              reject(new Error('Missing required parameters for click action'));\n              return;\n            }\n            \n            const clickable = findElement(selectors);\n            if (!clickable) {\n              reject(new Error('Element not found'));\n              return;\n            }\n            \n            if (clickable && 'click' in clickable) {\n              clickable.click();\n            }\n            resolve({ success: true });\n            \n          default:\n            reject(new Error('Unknown action type'));\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  \n  // Find an element using multiple selectors\n  function findElement(selectors: string[]): ElementWithFocus | ElementWithClick | null {\n    if (!selectors || !Array.isArray(selectors) || selectors.length === 0) {\n      return null;\n    }\n    \n    for (const selector of selectors) {\n      const element = document.querySelector(selector) as ElementWithFocus | ElementWithClick | null;\n      if (element) {\n        return element;\n      }\n    }\n    return null;\n  }\n  \n  console.log('MCP SCRIPT: Initialized and listening for commands');\n})();";
