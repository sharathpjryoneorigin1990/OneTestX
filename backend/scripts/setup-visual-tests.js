#!/usr/bin/env node

import fs from 'fs-extra';
import path from 'path';
import { fileURLToPath } from 'url';
import chalk from 'chalk';

// Get the current directory in ES module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration
const CONFIG = {
  baseDir: path.join(__dirname, '..'),
  directories: {
    // Test artifacts
    testResults: 'test-results',
    // Visual test directories
    visualTests: {
      root: 'visual-tests',
      baseline: 'visual-tests/baseline',
      actual: 'visual-tests/actual',
      diffs: 'visual-tests/diffs',
      screenshots: 'visual-tests/screenshots',
    },
    // Playwright-specific directories
    playwright: {
      results: 'test-results/playwright',
      videos: 'test-results/videos',
      traces: 'test-results/traces',
      snapshots: 'test-results/snapshots',
    },
  },
  // File permissions
  permissions: 0o777, // rwxrwxrwx
};

// Colors for console output
const colors = {
  success: chalk.green,
  info: chalk.blue,
  warning: chalk.yellow,
  error: chalk.red,
  highlight: chalk.cyan,
};

/**
 * Create a directory if it doesn't exist
 * @param {string} dir - Directory path to create
 * @param {string} [description] - Description of the directory
 */
async function createDirectory(dir, description = '') {
  const relativePath = path.relative(process.cwd(), dir);
  
  try {
    if (!(await fs.pathExists(dir))) {
      await fs.mkdir(dir, { recursive: true, mode: CONFIG.permissions });
      console.log(colors.success(`✓ Created: ${relativePath} ${description ? `(${description})` : ''}`));
      return true;
    } else {
      console.log(colors.info(`✓ Exists: ${relativePath} ${description ? `(${description})` : ''}`));
      return false;
    }
  } catch (error) {
    console.error(colors.error(`✗ Failed to create ${relativePath}: ${error.message}`));
    return false;
  }
}

/**
 * Main setup function
 */
async function setupVisualTests() {
  console.log(colors.highlight('\n🚀 Setting up visual testing environment...\n'));
  
  // Create base directories
  const dirs = [
    // Root test results directory
    { path: path.join(CONFIG.baseDir, CONFIG.directories.testResults), desc: 'Test results' },
    
    // Visual test directories
    { path: path.join(CONFIG.baseDir, CONFIG.directories.visualTests.root), desc: 'Visual tests root' },
    { path: path.join(CONFIG.baseDir, CONFIG.directories.visualTests.baseline), desc: 'Baseline images' },
    { path: path.join(CONFIG.baseDir, CONFIG.directories.visualTests.actual), desc: 'Actual test results' },
    { path: path.join(CONFIG.baseDir, CONFIG.directories.visualTests.diffs), desc: 'Visual diffs' },
    { path: path.join(CONFIG.baseDir, CONFIG.directories.visualTests.screenshots), desc: 'Screenshots' },
    
    // Playwright directories
    { path: path.join(CONFIG.baseDir, CONFIG.directories.playwright.results), desc: 'Playwright test results' },
    { path: path.join(CONFIG.baseDir, CONFIG.directories.playwright.videos), desc: 'Test videos' },
    { path: path.join(CONFIG.baseDir, CONFIG.directories.playwright.traces), desc: 'Test traces' },
    { path: path.join(CONFIG.baseDir, CONFIG.directories.playwright.snapshots), desc: 'Test snapshots' }
  ];
  
  // Create all directories
  try {
    const results = await Promise.all(dirs.map(async (dir) => {
      return await createDirectory(dir.path, dir.desc);
    }));
    
    // Create a .gitkeep file in each directory to ensure they're committed to git
    await Promise.all(
      dirs.map(dir => 
        fs.writeFile(path.join(dir.path, '.gitkeep'), '# Automatically generated by setup script')
      )
    );
    
    const createdCount = results.filter(Boolean).length;
    const totalCount = dirs.length;
    
    // Summary
    console.log(colors.highlight('\n✨ Setup complete!\n'));
    console.log(`${colors.success('✓')} Created ${createdCount} of ${totalCount} directories\n`);
    
    // Next steps
    console.log(colors.highlight('Next steps:'));
    console.log(`1. ${colors.info('Run the backend server:')} ${chalk.cyan('cd backend && npm run dev')}`);
    console.log(`2. ${colors.info('Run the frontend:')} ${chalk.cyan('cd newfrontend && npm run dev')}`);
    console.log(`3. ${colors.info('Run visual tests:')} ${chalk.cyan('npm run test:visual')}`);
    console.log(`4. ${colors.info('Update baselines:')} ${chalk.cyan('npm run test:visual:update')}`);
    console.log(`5. ${colors.info('Access the visual testing interface:')} ${chalk.cyan('http://localhost:3000/test-files/visual')}\n`);
    
    // Environment variables
    console.log(colors.highlight('Environment variables:'));
    console.log(`- ${colors.info('UPDATE_BASELINES=true')} - Update baseline images`);
    console.log(`- ${colors.info('HEADFUL=true')} - Run tests in headed mode`);
    console.log(`- ${colors.info('PWDEBUG=1')} - Enable Playwright debug mode\n`);
  } catch (error) {
    console.error(colors.error('\n❌ Setup failed:'), error);
    process.exit(1);
  }
}

// Run the setup
setupVisualTests().catch(error => {
  console.error(colors.error('\n❌ Setup failed:'), error);
  process.exit(1);
});
